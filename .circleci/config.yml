version: 2
jobs:
    build:
        working_directory: ~/circleci-java-spring

        docker:
            - image: galeb/rhcircleci:11

        steps:
            - checkout

            - restore_cache:
                key: circleci-galeb-{{ checksum "pom.xml" }}

            - run:
                name: Define Galeb version
                command: |
                  last=$(curl -s -L https://api.github.com/repos/galeb/galeb/releases/latest | jq -r .tag_name | sed 's/v.\+\..\+\.//')
                  export GALEB_VERSION=4.0.$[last + 1]
                  echo $GALEB_VERSION | tee /tmp/galeb_version

            - run:
                name: Build package
                command: |
                  export GALEB_VERSION=$(cat /tmp/galeb_version)
                  if [ "${CIRCLE_BRANCH}" == "test" ]; then
                    mvn package
                  else
                    mvn package -DskipTests
                  fi

            - save_cache:
                paths:
                    - ~/.m2
                key: circleci-galeb-{{ checksum "pom.xml" }}

            - deploy:
                name: Push release
                command: |
                    if [ "x${FORCE_DEPLOY}" == "xtrue" -o "${CIRCLE_BRANCH}" == "master" ]; then
                      sudo yum update -y || true
                      sudo yum install -y ruby-devel gcc make rpm-build rubygems
                      sudo gem install --no-ri --no-rdoc fpm
                      export GALEB_VERSION=$(cat /tmp/galeb_version)
                      echo $GALEB_VERSION
                      make galeb dist
                      ls -l dists
                      upload=$(curl -s -L -H "Authorization: token $GITHUB_TOKEN" -XPOST -d'{"body": "v'$GALEB_VERSION'", "name": "v'$GALEB_VERSION'", "tag_name": "v'$GALEB_VERSION'", "target_commitish": "'$CIRCLE_SHA1'"}' https://api.github.com/repos/galeb/galeb/releases | jq -r .upload_url | sed 's/{.*//')
                      echo "upload_url : $upload"
                      cd dists/; for pkg in *${GALEB_VERSION}*rpm; do
                        if [ "x$GITHUB_TOKEN" != "x" ]; then
                          curl -s -L -H "Authorization: token $GITHUB_TOKEN" -XPOST -H'content-type: application/x-redhat-package-manager' --data-binary @$pkg ${upload}?name=${pkg}
                        else
                          echo "ERROR: one or more envs undefined"
                        fi
                      done; cd - > /dev/null
                    fi
